datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Authentication-related models
model User {
  id            String          @id @default(cuid()) // Changed to cuid for consistency with auth system
  name          String?
  username      String          @unique 
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?         // Added password for blog login
  accounts      Account[]
  sessions      Session[]
  resetToken        String?  // Token for password reset
  resetTokenExpiry  DateTime? // Expiry time for the token
  // Optional for WebAuthn support
  Authenticators Authenticator[]

  // Blog-related field
  posts         BlogPost[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Blog-related models
model Category {
  id      Int        @id @default(autoincrement())
  name    String     @unique
  posts   BlogPost[] 
}

model BlogPost {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  authorId   String   // Updated to match the String ID type of User
  categoryId Int    
  author     User     @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  // Add createdAt and updatedAt fields
  createdAt  DateTime @default(now())  // Automatically set to the current date and time when the post is created
  updatedAt  DateTime @updatedAt        // Automatically updated to the current date and time when the post is updated
}
